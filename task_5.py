# -*- coding: utf-8 -*-
"""Task 5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_CbbJrxkrqpVfaDZqyp4geQGORhq_6VC
"""

# Importing lib
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
plt.style.use('ggplot')
import warnings
warnings.simplefilter('ignore')

# Data ingestion
df = pd.read_csv('/content/Advertising.csv')

# Preview data
df.head()

# Checking for shape
df.shape

# Checking basic information about dataset
df.info()

# Descriptive stats
df.describe()

# Check for columns
df.columns

# Drop 'Unnamed: 0'
df.drop('Unnamed: 0',axis=1,inplace=True)
# Preview the data
df.head()

# Check for duplicates
df.duplicated().sum()

# Check for null values
df.isnull().sum()

# Visualize data
sns.scatterplot(data=df,x='TV',y='Sales',color='blue')
plt.title('TV vs Sales')
plt.show()

sns.scatterplot(data=df,x='Radio',y='Sales',color='blue')
plt.title('Radio vs Sales')
plt.show()

sns.scatterplot(data=df,x='Newspaper',y='Sales',color='blue')
plt.title('Newspaper vs Sales')
plt.show()

# Segregating into independent and dependent
X = df.iloc[:,:-1]
y = df['Sales']

# Train test and split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train,y_test = train_test_split(X,y,test_size = 0.20, random_state = 0)

# Model training
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score

models = {
    'dt' : DecisionTreeRegressor(),
    'lr' : LinearRegression(),
    'random' : RandomForestRegressor()
}

report = {}
for i in range(len(list(models))):
            model = list(models.values())[i]
            print(f"Model Training started with {model}")
            model.fit(X_train,y_train)
            print(f"Training completed successfully")
            y_test_pred = model.predict(X_test)
            print("Calculating score")
            test_model_score = r2_score(y_test, y_test_pred)
            print(f"Calculted score: {round(test_model_score*100,2)}% for {model}")
            print("=="*30)
            report[list(models.keys())[i]] = test_model_score

# We will select randomforest
random = RandomForestRegressor()

random.fit(X_train,y_train)
y_pred = random.predict(X_test)

df.iloc[6].values

model.predict([[57.5, 32.8, 23.5]])[0]