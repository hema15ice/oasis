# -*- coding: utf-8 -*-
"""task 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/144NnZeeNwNYIAHZvSo8rwA9BCMoueu0l
"""

# Commented out IPython magic to ensure Python compatibility.
#IMPORT THE NECESSARY LIBRARIES
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
plt.style.use('ggplot')
import warnings
warnings.simplefilter('ignore')

#IMPORT THE DATASET
data = pd.read_csv('CarPrice_Assignment.csv')
data.head()

#CHECKING THE DIMENSION OF THE DATASET
print(f"Dataset has {data.shape[0]} rows and {data.shape[1]} columns")

#CHECKING BASIC INFORMATION OF DATASET
data.info()

#CTAEGORICAL FEATURES
cat_features = [cat for cat in data.columns if data[cat].dtype == 'O']
print(f"The dataset has total {len(cat_features)} categorical attributes")

#NUMERICAL FEATURES
num_features = [num for num in data.columns if data[num].dtype != "O"]
print(f"The dataset has total {len(cat_features)} categorical attributes")

#DESCRIPTIVE STATISTICS ANALYSIS
data.describe().T

#CHECKING NULL VALUES
data.isnull().sum()

#CHECKING FOR DUPLICATE VALUES
data[data.duplicated()].sum()

#DATA CLEANING
data.head()

#CHECKING FOR UNIQUE CAR COMPANY
data["CarName"].unique()

#CREATING FUNCTION TO REPLACE VALUE IN CARNAME ATTRIBUTES
def replace(a,b):
  data['CarName'].replace(a,b,inplace=True)
replace('maxda','mazda')
replace('porcshce','porsche')
replace('toyouto','toyota')
replace('vokswagen','volkswagen')
replace('vw','volkswagen')

#CHECKING FOR UNIQUE CAR COMPANY
data["CarName"].unique()

#CHECKING FOR OUTLIERS
plt.figure(figsize=(15,10))
sns.boxplot(data,palette='Set2',width=0.8,fliersize=10)
plt.title('Boxplot of features', pad=10, fontweight="black", fontsize=20)
plt.xticks(rotation=45)
plt.show()

z = round(data.groupby(["CarName"])["price"].agg(['mean']),2).T
z

data = data.merge(z.T,how='left',on="CarName")

bins = [0,10000,20000,40000]
cars_bin = ["Budget","Medium","Highend"]
data["CarsRange"] = pd.cut(data['mean'],bins,right=False,labels=cars_bin)
data.head()

new_data=data[['fueltype','aspiration','doornumber','carbody','drivewheel','enginetype','cylindernumber','fuelsystem','wheelbase','carlength','carwidth','curbweight','enginesize','boreratio','horsepower','citympg','highwaympg','price','CarsRange']]

new_data

#CREATING DUMMIES VARIABLES FOR ALL THE CATEGORICAL FEATURES
new_data = pd.get_dummies(columns=['fueltype','aspiration','doornumber','carbody','drivewheel','enginetype','cylindernumber','fuelsystem','CarsRange'],data = new_data)

new_data.head()

#AS WE KNOW THAT OUR DATASET HAS SOME OUTLIERS SO WE DO SCALINNG OF NUMERIC DATA
from sklearn.preprocessing import StandardScaler
scalar = StandardScaler()
num_cols = ['wheelbase','carlength','carwidth','enginesize','boreratio','horsepower','citympg','highwaympg']
new_data[num_cols] = scalar.fit_transform(new_data[num_cols])

new_data.head()

#SEGREGATING DATA INTO INDEPENDENT AND DEPENDENT FEATURES
x = new_data.drop(columns = ["price"])
y = new_data["price"]

#SPLITTING TRAIN AND TEST
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 42)

#MODEL TRAINING BY USING RANDOM FOREST
from sklearn.ensemble import RandomForestRegressor
random_forest = RandomForestRegressor()

#TO FIT THE MODEL
random_forest.fit(x_train,y_train)

#PREDICT THE VALUE
y_pred = random_forest.predict(x_test)

#MODEL EVALUATION
from sklearn.metrics import r2_score
print(r2_score(y_test,y_pred))

#TO TESTING A MODEL
new_data = x_test.loc[100].values
random_forest.predict([new_data])[0]